/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.5/userguide/building_java_projects.html in the Gradle documentation.
 * This project uses @Incubating APIs which are subject to change.
 */
plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // This dependency is used by the application.
    implementation libs.guava
    assert delegate == project.dependencies
    delegate.testImplementation "junit:junit:4.13"
}

testing {
    suites {
        // Configure the built-in test suite
        test {
            // Use JUnit4 test framework
            useJUnit('4.13.2')
        }
    }
}

ext {
  springVersion = "3.1.0.RELEASE"
}
sourceSets.all { ext.purpose = null }

sourceSets {
  main {
    purpose = "production"
  }
  test {
    purpose = "test"
  }
  plugin {
    purpose = "production"
  }
}

tasks.register("pp"){
  def springVersion = springVersion
  def productionSourceSets = provider {
    sourceSets.matching { it.purpose == 'production'}.collect {it.name}
  }
  doLast {
    println springVersion
    productionSourceSets.get().each {println it}
  }
}


// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

application {
    // Define the main class for the application.
    mainClass = 'com.loern.tutorial.App'
}


tasks.register("firstTask") {
    println "Reg First Task..."
    doFirst {
        println "Reg doFirst"
    }
    doLast {
        println "Reg doLast"
    }
}

tasks.named("firstTask") {
    println "Named First Task"
    doFirst {
        println "Named doFirst"
    }
    doLast {
        println "Named doLast"
    }
}

tasks.register("copyTask",Copy) {
   from("source")
   into("target")
   include("*.war")
}

 //println name
 //println project.name
 //println path
 //println layout
 //println uri()

tasks.register("zip-reports",Zip){
    from("Reports")
    include("*")
    archiveBaseName = "Reports.zip"
    destinationDirectory = file('/dir')
}

//def check = tasks.register('check')
var verification = tasks.register("verification") {
//    verification ->  check.get().dependsOn verification
}


check.configure {
    dependsOn verification
}

// tasks.named("test") {
  // useJUintPlatform()
// }
tasks.named("javadoc") {

}

println "${project.layout.projectDirectory}"

class UserInfo {
  String name
  String email
}

tasks.register("configure") {
  def user = configure(new UserInfo()) {
    name  = "lucky"
    email = "lucky@163.com"
  }
  doLast {
    println user.name
    println user.email
  }
}

tasks.register("hello") {
  group = "Custom"
  description = "A newly hello task"
  doLast {
    println "$group -- $description"
  }
}

tasks.register("intro") {
  dependsOn tasks.hello
  doLast {
    println "Task Intro"
  }
}



4.times { counter -> 
  tasks.register("task$counter") {
    doLast {
      println "i'am task $counter"
    }
  }
}
//动态添加依赖
tasks.named("task0") {
  dependsOn("task1","task2")
}


tasks.named("hello") {
  doFirst {
    println "first hello"
  }
}

abstract class HelloTask extends DefaultTask {
  @TaskAction
  void run(){
    println "Extends Default Task"
  }
}

tasks.create("defalutHello",HelloTask) {
  group = "Custom"
  description = "Self Custom Hello Task"
}

abstract class CreateFileTask extends DefaultTask {
 
  @Input 
  def fileText = "Hello from CreateFileTask"

  @Input
  def fileName = "CreateFile.txt"

  @OutputFile
  def file = new File(fileName)

  @TaskAction
  void fun(){
    file.createNewFile()
    file.write(fileText)
  }
}

tasks.register("createFile",CreateFileTask)
